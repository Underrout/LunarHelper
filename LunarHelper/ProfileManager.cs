using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LunarHelper
{
    internal class ProfileManager
    {
        static private string profile_folder_search_prefix = "profile_";
        static private string default_profile_folder_search_prefix = "default_profile_";
        static private string lunar_helper_profile_define_file_path = ".lunar_helper/current_profile.asm";

        static private string current_profile_define_prefix = "!LH_PROFILE_";

        static private string define_comment = "Format: \"!LH_PROFILE_<profile_name> = 1\", current profile is: ";
        static private string warning_comment = "DO NOT EDIT THIS FILE MANUALLY, IT IS AUTOMATICALLY GENERATED BY LUNAR HELPER\n" +
            "; Feel free to incsrc this to determine the currently active Lunar Helper profile though!";

        public string current_profile = null;

        public ProfileManager()
        {
            SwitchProfile(DetermineCurrentProfile());
        }

        public Config DetermineConfig()
        {
            Config base_config = Config.Load(out var err);
            if (base_config == null)
            {
                Program.Error($"Could not parse config.txt file(s)\n{err}");
                return null;
            }

            if (current_profile == null)
            {
                // if we don't have a profile, just return the "base config"
                return base_config;
            }

            // load profile specific config

            var prefix = GetDefaultProfiles().Contains(current_profile) ? default_profile_folder_search_prefix : profile_folder_search_prefix; 
            Config full_config = Config.Load(out var profile_err, base_config, prefix + current_profile + "\\");

            if (profile_err != "")
            {
                Program.Error($"Could not parse config.txt file(s)\n{profile_err}");
                return null;
            }

            return full_config;
        }

        public void SwitchProfile(string new_profile)
        {
            current_profile = new_profile;
        }

        public string DetermineCurrentProfile()
        {
            // we have no define file, so we need to grab the default profile
            return DetermineDefaultProfile();
        }

        public void WriteCurrentProfileToFile(string output_folder)
        {
            Directory.CreateDirectory(Path.Combine(output_folder, ".lunar_helper"));

            var define_name = current_profile_define_prefix + current_profile;
            var full_define = $"{define_name} = 1";

            File.WriteAllText(Path.Combine(output_folder, lunar_helper_profile_define_file_path), 
                $"; {warning_comment}\n\n{full_define}  ; {define_comment}{current_profile}\n");
        }

        public void DeleteCurrentProfileFile(string output_folder)
        {
            if (File.Exists(Path.Combine(output_folder, lunar_helper_profile_define_file_path)))
                File.Delete(Path.Combine(output_folder, lunar_helper_profile_define_file_path));
        }

        public static IEnumerable<string> GetAllProfiles()
        {
            return GetDefaultProfiles().Concat(GetProfiles());
        }

        public static IEnumerable<string> GetDefaultProfiles()
        {
            return Directory.GetDirectories(Path.GetDirectoryName(Process.GetCurrentProcess().MainModule.FileName), default_profile_folder_search_prefix + "*", SearchOption.TopDirectoryOnly)
                .Select(p => new DirectoryInfo(p).Name.Substring(default_profile_folder_search_prefix.Length));
        }

        public static IEnumerable<string> GetProfiles()
        {
            return Directory.GetDirectories(Path.GetDirectoryName(Process.GetCurrentProcess().MainModule.FileName), profile_folder_search_prefix + "*", SearchOption.TopDirectoryOnly)
                .Select(p => new DirectoryInfo(p).Name.Substring(profile_folder_search_prefix.Length));
        }

        private static string DetermineDefaultProfile()
        {
            var default_profiles = GetDefaultProfiles().ToArray();

            if (default_profiles.Length > 1)
                throw new Exception("Cannot have more than one default profile");

            if (default_profiles.Length == 1)
                return default_profiles[0];

            var profiles = GetProfiles().ToArray();

            if (profiles.Length >= 1)
                // we have one or more profiles, but no default ones, so just pick the first non-default profile as "default"
                return profiles[0];
            else
                return null;  // return null to indicate that we don't have a default profile at all
        }
    }
}
